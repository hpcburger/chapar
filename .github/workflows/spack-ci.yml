name: HPC Spack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - 'specs/**'
      - 'containers/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      build_containers:
        description: 'Build containers'
        required: false
        default: 'true'
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: 'true'
        type: boolean

# Global environment variables
env:
  SPACK_ROOT: "/opt/spack"
  SPACK_ENVIRONMENT: "skipper"
  SPACK_INSTALL_ROOT: "/opt/spack/opt/spack"
  SPACK_BUILD_STAGE: "/tmp/spack-stage"
  SPACK_BUILD_STAGE_RAM: "/dev/shm/spack-stage"
  SPACK_SOURCE_CACHE: "/tmp/spack/cache/source"
  SPACK_MISC_CACHE: "/tmp/spack/cache/misc"
  SPACK_TEST_CACHE: "/tmp/spack/cache/test"
  SPACK_CCACHE_DIR: "/tmp/spack/ccache"
  SPACK_BUILD_JOBS: "4"
  SPACK_CI_STACK_NAME: "hpc-skipper"
  SPACK_DISABLE_COMPILER_EXISTENCE_CHECK: "true"
  CONTAINER_REGISTRY: "ghcr.io"
  BUILDCACHE_DESTINATION: "file:///tmp/spack/buildcache"

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================================================
  # PREPARE JOB - Setup and concretize environment
  # ==========================================================================
  prepare:
    name: Prepare Spack Environment
    runs-on: ubuntu-latest
    container:
      image: spack/rocky8-runner:latest
    timeout-minutes: 30
    
    outputs:
      spack-lock-hash: ${{ steps.lock-hash.outputs.hash }}
      environment-changed: ${{ steps.changes.outputs.environment }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Spack
      run: |
        echo "Setting up Spack environment..."
        ./ci/github/setup-spack.sh
        
    - name: Check for environment changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          environment:
            - 'environments/${{ env.SPACK_ENVIRONMENT }}/**'
            - 'specs/**'

    - name: Concretize environment
      if: steps.changes.outputs.environment == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Concretizing Spack environment..."
        cd environments/${{ env.SPACK_ENVIRONMENT }}
        source ${{ env.SPACK_ROOT }}/share/spack/setup-env.sh
        spack env activate .
        spack concretize --fresh --force
        spack env status

    - name: Generate lock file hash
      id: lock-hash
      run: |
        if [ -f "environments/${{ env.SPACK_ENVIRONMENT }}/spack.lock" ]; then
          hash=$(sha256sum environments/${{ env.SPACK_ENVIRONMENT }}/spack.lock | cut -d' ' -f1)
          echo "hash=$hash" >> $GITHUB_OUTPUT
        else
          echo "hash=no-lock" >> $GITHUB_OUTPUT
        fi

    - name: Upload environment artifacts
      uses: actions/upload-artifact@v4
      if: steps.changes.outputs.environment == 'true' || github.event_name == 'workflow_dispatch'
      with:
        name: spack-environment
        path: |
          environments/${{ env.SPACK_ENVIRONMENT }}/spack.lock
          environments/${{ env.SPACK_ENVIRONMENT }}/spack.yaml
        retention-days: 7

  # ==========================================================================
  # GENERATE JOB - Create Spack CI pipeline
  # ==========================================================================
  generate:
    name: Generate Spack CI Pipeline
    runs-on: ubuntu-latest
    container:
      image: spack/rocky8-runner:latest
    timeout-minutes: 20
    needs: prepare
    if: needs.prepare.outputs.environment-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has-packages: ${{ steps.generate-matrix.outputs.has-packages }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download environment artifacts
      uses: actions/download-artifact@v4
      with:
        name: spack-environment
        path: environments/${{ env.SPACK_ENVIRONMENT }}/

    - name: Setup Spack
      run: ./ci/github/setup-spack.sh

    - name: Generate CI matrix
      id: generate-matrix
      run: |
        echo "Generating Spack CI build matrix..."
        cd environments/${{ env.SPACK_ENVIRONMENT }}
        source ${{ env.SPACK_ROOT }}/share/spack/setup-env.sh
        spack env activate .
        
        # Generate a simplified matrix for GitHub Actions
        # (GitHub Actions doesn't support dynamic pipeline generation like GitLab)
        python3 << 'EOF'
        import json
        import subprocess
        import sys
        
        try:
            # Get list of specs to build
            result = subprocess.run(['spack', 'find', '--format', '{name}@{version}%{compiler.name}@{compiler.version} arch={architecture}'], 
                                  capture_output=True, text=True, check=True)
            specs = result.stdout.strip().split('\n')
            specs = [s for s in specs if s.strip()]
            
            if not specs:
                print("No specs found")
                matrix = {"include": []}
                has_packages = "false"
            else:
                # Create matrix entries
                matrix_entries = []
                for i, spec in enumerate(specs[:20]):  # Limit to 20 for GitHub Actions
                    entry = {
                        "spec": spec,
                        "name": f"build-{i:02d}",
                        "os": "rocky8" if "rocky8" in spec else "rocky9"
                    }
                    matrix_entries.append(entry)
                
                matrix = {"include": matrix_entries}
                has_packages = "true" if matrix_entries else "false"
            
            print(f"Generated matrix with {len(matrix['include'])} entries")
            print(f"::set-output name=matrix::{json.dumps(matrix)}")
            print(f"::set-output name=has-packages::{has_packages}")
            
        except Exception as e:
            print(f"Error generating matrix: {e}")
            print("::set-output name=matrix::{\"include\": []}")
            print("::set-output name=has-packages::false")
            sys.exit(1)
        EOF

    - name: Upload generated artifacts
      uses: actions/upload-artifact@v4
      if: steps.generate-matrix.outputs.has-packages == 'true'
      with:
        name: spack-ci-config
        path: |
          environments/${{ env.SPACK_ENVIRONMENT }}/
        retention-days: 3

  # ==========================================================================
  # BUILD PACKAGES JOB - Build Spack packages
  # ==========================================================================
  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    container:
      image: spack/rocky8-runner:latest
    timeout-minutes: 120
    needs: [prepare, generate]
    if: needs.generate.outputs.has-packages == 'true'
    
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix: ${{ fromJson(needs.generate.outputs.matrix) }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: spack-environment
        path: environments/${{ env.SPACK_ENVIRONMENT }}/

    - name: Setup Spack
      run: ./ci/github/setup-spack.sh

    - name: Setup build cache
      run: |
        mkdir -p /tmp/spack/buildcache
        source ${{ env.SPACK_ROOT }}/share/spack/setup-env.sh
        spack mirror add buildcache file:///tmp/spack/buildcache || true

    - name: Build packages
      run: |
        echo "Building packages for: ${{ matrix.spec }}"
        cd environments/${{ env.SPACK_ENVIRONMENT }}
        source ${{ env.SPACK_ROOT }}/share/spack/setup-env.sh
        spack env activate .
        
        # Install packages
        spack install --fail-fast --verbose "${{ matrix.spec }}" || true
        
        # Create build cache entry
        spack buildcache create --allow-root --unsigned file:///tmp/spack/buildcache "${{ matrix.spec }}" || true

    - name: Upload build cache
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: buildcache-${{ matrix.name }}
        path: /tmp/spack/buildcache/
        retention-days: 7

  # ==========================================================================
  # BUILD CONTAINERS JOB - Create Apptainer containers
  # ==========================================================================
  build-rocky8-container:
    name: Build Rocky 8 Container
    runs-on: ubuntu-latest
    timeout-minutes: 240
    needs: [prepare, build-packages]
    if: always() && (needs.prepare.outputs.environment-changed == 'true' || github.event_name == 'workflow_dispatch') && (github.event.inputs.build_containers != 'false')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Apptainer
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/apptainer/apptainer/releases/download/v${{ env.APPTAINER_VERSION }}/apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb
        sudo apt-get install -y ./apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb

    - name: Download build cache artifacts
      uses: actions/download-artifact@v4
      if: needs.build-packages.result == 'success'
      with:
        pattern: buildcache-*
        path: /tmp/spack/buildcache/
        merge-multiple: true

    - name: Build Rocky 8 container
      run: |
        echo "Building Rocky Linux 8 Apptainer container..."
        cd containers
        sudo apptainer build \
          --fakeroot \
          --tmpdir /tmp \
          hpc-spack-skipper-rocky8.sif \
          rocky8/skipper-rocky8.def

    - name: Test container
      run: |
        echo "Testing Rocky 8 container..."
        cd containers
        apptainer test hpc-spack-skipper-rocky8.sif

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Convert and push to registry
      if: github.event_name != 'pull_request'
      run: |
        cd containers
        # Convert SIF to Docker format and push
        docker import hpc-spack-skipper-rocky8.sif ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:${{ github.ref_name }}
        docker push ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:${{ github.ref_name }}
        
        # Tag as latest if on main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker tag ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:${{ github.ref_name }} ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:latest
          docker push ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:latest
        fi

    - name: Upload container artifact
      uses: actions/upload-artifact@v4
      with:
        name: hpc-spack-rocky8-container
        path: containers/hpc-spack-skipper-rocky8.sif
        retention-days: 14

  build-rocky9-container:
    name: Build Rocky 9 Container
    runs-on: ubuntu-latest
    timeout-minutes: 240
    needs: [prepare, build-packages]
    if: always() && (needs.prepare.outputs.environment-changed == 'true' || github.event_name == 'workflow_dispatch') && (github.event.inputs.build_containers != 'false') && github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Apptainer
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/apptainer/apptainer/releases/download/v${{ env.APPTAINER_VERSION }}/apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb
        sudo apt-get install -y ./apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb

    - name: Download build cache artifacts
      uses: actions/download-artifact@v4
      if: needs.build-packages.result == 'success'
      with:
        pattern: buildcache-*
        path: /tmp/spack/buildcache/
        merge-multiple: true

    - name: Build Rocky 9 container
      run: |
        echo "Building Rocky Linux 9 Apptainer container..."
        cd containers
        sudo apptainer build \
          --fakeroot \
          --tmpdir /tmp \
          hpc-spack-skipper-rocky9.sif \
          rocky9/skipper-rocky9.def

    - name: Test container
      run: |
        echo "Testing Rocky 9 container..."
        cd containers
        apptainer test hpc-spack-skipper-rocky9.sif

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Convert and push to registry
      run: |
        cd containers
        # Convert SIF to Docker format and push
        docker import hpc-spack-skipper-rocky9.sif ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:${{ github.ref_name }}
        docker push ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:${{ github.ref_name }}
        
        # Tag as latest if on main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker tag ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:${{ github.ref_name }} ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:latest
          docker push ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:latest
        fi

    - name: Upload container artifact
      uses: actions/upload-artifact@v4
      with:
        name: hpc-spack-rocky9-container
        path: containers/hpc-spack-skipper-rocky9.sif
        retention-days: 14

  # ==========================================================================
  # TEST JOB - Validate built containers
  # ==========================================================================
  test-containers:
    name: Test Containers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-rocky8-container, build-rocky9-container]
    if: always() && (needs.build-rocky8-container.result == 'success' || needs.build-rocky9-container.result == 'success') && (github.event.inputs.run_tests != 'false')
    
    strategy:
      matrix:
        container: [rocky8, rocky9]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Apptainer
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/apptainer/apptainer/releases/download/v${{ env.APPTAINER_VERSION }}/apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb
        sudo apt-get install -y ./apptainer_${{ env.APPTAINER_VERSION }}_amd64.deb

    - name: Download container artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: hpc-spack-${{ matrix.container }}-container
        path: containers/

    - name: Test container functionality
      if: hashFiles('containers/hpc-spack-skipper-*.sif') != ''
      run: |
        cd containers
        container_file=$(ls hpc-spack-skipper-${{ matrix.container }}.sif 2>/dev/null || echo "")
        
        if [ -n "$container_file" ] && [ -f "$container_file" ]; then
          echo "Testing ${{ matrix.container }} container..."
          
          # Basic functionality tests
          apptainer exec $container_file spack --version
          apptainer exec $container_file spack find
          
          # Test environment activation
          apptainer exec $container_file bash -c "source /opt/spack/share/spack/setup-env.sh && spack env list"
          
          # Test MPI if available
          apptainer exec $container_file bash -c "source /opt/spack/share/spack/setup-env.sh && spack env activate /opt/spack/environments/skipper && spack load openmpi && mpirun --version" || echo "MPI test skipped"
          
          echo "${{ matrix.container }} container tests completed successfully!"
        else
          echo "Container file not found for ${{ matrix.container }}, skipping tests"
        fi

  # ==========================================================================
  # DEPLOY JOB - Create deployment manifest
  # ==========================================================================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-containers]
    if: always() && github.ref == 'refs/heads/main' && (needs.test-containers.result == 'success' || needs.test-containers.result == 'skipped')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create deployment manifest
      run: |
        echo "Creating deployment manifest..."
        cat > deployment-manifest.json << EOF
        {
          "version": "${{ github.sha }}",
          "tag": "${{ github.ref_name }}",
          "containers": {
            "rocky8": "ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky8:${{ github.ref_name }}",
            "rocky9": "ghcr.io/${{ github.repository_owner }}/hpc-spack-rocky9:${{ github.ref_name }}"
          },
          "spack_environment": "${{ env.SPACK_ENVIRONMENT }}",
          "build_date": "$(date -Iseconds)",
          "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "commit": {
            "sha": "${{ github.sha }}",
            "message": "${{ github.event.head_commit.message }}",
            "author": "${{ github.event.head_commit.author.name }}"
          }
        }
        EOF
        
        echo "Deployment manifest:"
        cat deployment-manifest.json

    - name: Upload deployment manifest
      uses: actions/upload-artifact@v4
      with:
        name: deployment-manifest
        path: deployment-manifest.json
        retention-days: 90
